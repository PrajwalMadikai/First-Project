<%- include("../partials/homeHeader") %>
<%- include("../partials/mainHeader") %>

<style>
  .footer-container{
    width: 100%;
  }
    .loader {
    border: 8px solid #f3f3f3;
    border-radius: 50%;
    border-top: 8px solid #3498db;
    width: 50px;
    height: 50px;
    animation: spin 2s linear infinite;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
    .order-status {
    display: flex;
    justify-content: space-between;
    margin: 20px 0;
  }
  .order-status .step {
    text-align: center;
    flex: 1;
  }
  .step .icon {
    width: 30px;
    height: 30px;
    background-color: #6c63ff;
    border-radius: 50%;
    display: inline-block;
  }
  .step p {
    margin-top: 10px;
    font-weight: bold;
  }
  .order-item img {
    max-width: 100px;
    margin-right: 15px;
  }
  .order-item {
    display: flex;
    align-items: center;
  }
  .order-summary {
    border-left: 1px solid #ddd;
    padding-left: 20px;
  }
  .card-equal {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  .equal-height-row {
    display: flex;
    align-items: stretch;
  }
  .textColor{
    color: black;
  }
  .inBtn{
    background-color: black;
    text-decoration: none;
    width: 180px;
    height: 40px;
    color:white;
    border-radius: 2px;
  }
  .swal2-popup-custom{
    background-color:white !important;
    
  }
  .rating-boxes {
  display: flex; /* Make the boxes align horizontally */
  gap: 10px; /* Add space between boxes */
}

.rating-boxes {
  display: flex; /* Make the boxes align horizontally */
  gap: 10px; /* Add space between boxes */
}
.b1{
  height: 20px;
}
.box {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 50px; /* Define box width */
  height: 50px; /* Define box height */
  border: 1px solid #ccc; /* 1px border for each box */
  text-align: center;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s, border-color 0.3s; /* Smooth transition for selection effect */
}

.box i {
  margin-right: 5px; /* Add some space between the star and the number */
}

/* Add styles for the selected box */
.box.selected {
  background-color: #ffd700; /* Change background color for selected box */
  border-color: #ffae00; /* Change border color for selected box */
}

</style>

<body>
  <div class="container mt-4">
    <!-- Delivery Address Section -->
    <div class="mb-4 container"> 
      <h5 class="font-weight-bold mb-2 text-danger">Delivery Address</h5>
      <div id="currAddress" class="col-lg-5 mb-2 px-4 py-4 saved-address border shadow-md rounded">
        <div class="d-flex justify-content-between mb-3">
          <span class="font-weight-bold text-uppercase"><%= user.firstName %></span>
        </div>
        <div><%= order.address[0].house %></div>
        <div><%= order.address[0].city %></div>
        <div><%= order.address[0].district %>-<%= order.address[0].pin %></div>
        <div class="mt-2">Mobile: <span class="font-weight-bold"><%= order.address[0].phone %></span></div>
        <div><%= user.email || '' %></div>
        <hr>
      </div>
    </div>
    
   <div class="d-flex justify-content-between mt-2">
    <h5 class="font-weight-bold  text-danger container">Order Detail</h5>
      <!-- Invoice Download Button -->
      <% if (order.products[0].paymentStatus === 'Success') { %> 
      <div>
        <a href="/download-invoice/<%= order._id %>">
          <button class="inBtn">Download Invoice</button>
        </a>
      </div>
      <% } %>
    </div>
    <% order.products.forEach((product) => { %>
      <div class="box-shadow col-lg-12 d-flex container pr-4 my-4 border border-1 shadow-md rounded-lg">
        <div class="row align-items-center">
          <div class="col-lg-4 p-0">
            <img class="img" src="/public/product_img/<%= product.image %>" alt="" style="height: 400px;width: 950px;">
          </div>
          <div class="col-lg-8">
            <h5 class="mt-3 text-center font-weight-bold mb-5" style="color: black;"><%= product.name %></h5>
            <div class="d-flex justify-content-between font-weight-bold my-4">
              <div>Amount</div>
              <div>Quantity</div>
              <div>Total</div>
              <div>Order Status</div>
            </div>
            <div class="d-flex justify-content-between font-weight-bold">
              <div>
                <p><% product._id%></p>
                <span class="mr-2">₹<%= product.price %></span>
              
              </div>
              <div><%= product.quantity %></div>
              <div>₹<%= product.price %></div>
              <div class="badge b1 
              <%= product.status === 'Delivered' ? 'badge-success' : 
                  product.status === 'Cancelled' ? 'badge-danger' : 
                  product.status === 'Pending' ? 'badge-warning' : 
                  'badge-primary' %>">
              <%= product.status %>
            </div>
            
            </div>
            <hr>
            <div class="progress">
              <div class="progress-bar"
                  role="progressbar"
                  data-order-status="<%= product.status %>"
                  style="width: 0%; background-color: #3486d3; border-radius: 16px;"
                  aria-valuenow="0"
                  aria-valuemin="0"
                  aria-valuemax="100">
              </div>
          </div>
          <div class="d-flex justify-content-around mt-1">
            <p class="text-muted small">Pending</p>
            <p class="text-muted small">Requested</p>
            <p class="text-muted small">Returned</p>
            <p class="text-muted small">Cancelled</p>
            <p class="text-muted small">Delivered</p>
        </div>
            <div class="font-weight-bold">
              <div class="d-flex justify-content-between align-items-center mt-3 mb-2">
                <!-- Payment Status -->
                <div>
                  payment status: 
                  <span class="badge ml-1
                    <% if (product.paymentStatus === 'Success') { %> 
                    badge-success 
                    <% } else if (product.paymentStatus === 'Pending') { %> 
                    badge-warning 
                    <% } else { %>
                    badge-danger
                    <% } %>">
                    <% if(product.paymentStatus==undefined){ %>
                       Failed
                    <% }else{ %>
                      <%= product.paymentStatus %>
                    <% } %>
                  </span>
                </div>
                <% if (product.status === 'Delivered') { %>
                  <button class="btn btn-outline-primary border-2"   data-bs-toggle="modal" data-bs-target="#returnModal<%= product._id %>">Return</button>
                <% } else if (product.status === 'Pending' && product.paymentStatus!="Failed") { %>
                  <button class="btn btn-outline-danger" data-bs-toggle="modal" data-bs-target="#cancelModal<%= product._id %>">Cancel</button>
                <% } %>

              </div>
              <% if(product.status=="Delivered"){ %>
                <!-- Rating Section -->
                <div class="mt-4 rating-sec">
                  <h6>Rate this product:</h6>
                  <div class="rating-boxes" data-product-id="<%= product.productId %>">
                    <div class="box" data-rating="1">
                      <i class="fa fa-star"></i> 
                    </div>
                    <div class="box" data-rating="2">
                      <i class="fa fa-star"></i> 
                    </div>
                    <div class="box" data-rating="3">
                      <i class="fa fa-star"></i> 
                    </div>
                    <div class="box" data-rating="4">
                      <i class="fa fa-star"></i> 
                    </div>
                    <div class="box" data-rating="5">
                      <i class="fa fa-star"></i> 
                    </div>
                  </div>
                  <button class="btn btn-primary mt-2" id="applyRatingBtn<%= product.productId %>">Submit</button>
                  <p id="rating-info" class="text text-success"><b></b></p>
                </div>
                <% } %>
            </div>
            
          </div>
        </div>
      </div>
     
      
      <!-- Return Modal for Each Product -->
      <div class="modal fade" id="returnModal<%= product._id %>" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="returnModalLabel">Return Product</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="returnForm<%= product._id %>">
              <div class="modal-body">
                <div class="mb-3">
                  <label for="reason<%= product._id %>" class="form-label">Reason</label>
                  <textarea id="reason<%= product._id %>" name="returnReason" rows="5" cols="40" class="form-control" required></textarea>
                </div>
              </div>
              <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Submit</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    
      <!-- Cancel Modal for Each Product -->
      <div class="modal fade" id="cancelModal<%= product._id %>" tabindex="-1" aria-labelledby="cancelModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="cancelModalLabel">Cancel Product</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="cancelForm<%= product._id %>">
              <div class="modal-body">
                <div class="mb-3">
                 
                  <label for="cancelReason<%= product._id %>" class="form-label">Reason</label>
                  <textarea id="cancelReason<%= product._id %>" name="cancelReason" rows="5" cols="40" class="form-control" required></textarea>
                </div>
              </div>
              <div class="modal-footer">
                <button type="submit" class="btn btn-danger">Submit</button>
              </div>
            </form>
          </div>
        </div>
      </div>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js"></script>
      <script>
 document.addEventListener('DOMContentLoaded', () => {       
    document.querySelectorAll('.rating-boxes').forEach(boxContainer => {
  let boxes = boxContainer.querySelectorAll('.box');
  let selectedRating = 0;

  // Handle box click events
  boxes.forEach(box => {
    box.addEventListener('click', function () {
      selectedRating = this.getAttribute('data-rating'); // Capture the selected rating value

      // Remove 'selected' class from all boxes
      boxes.forEach(b => b.classList.remove('selected'));

      // Add 'selected' class to the clicked box
      this.classList.add('selected');

      console.log('Selected rating:', selectedRating); // Just to verify the value on click
    });
  });

  // Handle apply button click event
  let applyBtn = document.getElementById('applyRatingBtn' + boxContainer.getAttribute('data-product-id'));
  applyBtn.addEventListener('click', function () {
    if (selectedRating > 0) {
      // Prepare data to send
      const productId = boxContainer.getAttribute('data-product-id');
      const userId = 'someUserId'; // Replace this with the actual logged-in user's ID

      // Send the rating to the server
      fetch('/rate-product', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ productId, rating: selectedRating, userId })
      }).then(response => response.json()).then(data => {
        if (data.success == true) {
          Swal.fire({
            text: "Rating Added",
            showConfirmButton: false,
            timer: 3000,
            backdrop: false,
            customClass: {
              popup: 'swal2-popup-custom',
            },
            position: 'bottom-end', // Set position to bottom right
            toast: true, // Make it a toast notification
          }).then(() => {
            document.querySelector('.rating-sec').style.display = 'none';
          });
        } else {
        }
      }).catch(error => {
        console.error('Error:', error);
        alert('An error occurred while submitting your rating.');
      });
    } else {
      console.log('No rating selected.');
    }
  });
});
 });
      </script>
      
     
      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
      <script>
document.addEventListener('DOMContentLoaded', () => {

        document.getElementById('returnForm<%= product._id %>').addEventListener('submit', async function(event) {
          event.preventDefault(); // Prevent the form from submitting the traditional way
    
          let reason = document.getElementById('reason<%= product._id %>').value;
          let productId = '<%= product._id %>'; // Get the product ID
    
          try {
            let response = await fetch(`/return/${productId}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ returnReason: reason }) // Send the reason in the body
            });
    
            if (response.ok) {
              Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Your return request has been submitted.',
                confirmButtonText: 'OK'
              }).then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong!',
                confirmButtonText: 'OK'
              });
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire({
              icon: 'error',
              title: 'Oops...',
              text: 'Network error or request failed.',
              confirmButtonText: 'OK'
            });
          }
        });
       


 
document.getElementById('cancelForm<%= product._id %>').addEventListener('submit', async function(event) {
    event.preventDefault();  

    let reason = document.getElementById('cancelReason<%= product._id %>').value;
    let productId = '<%= product._id %>'; 
    let quantity = '<%= product.quantity %>'
    let product='<%= product.productId%>'
   
    try {
        let response = await fetch(`/cancelOrder/${productId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ returnReason: reason, quantity ,product})  
        });

        if (response.ok) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Your cancellation request has been submitted.',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.reload();
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong!',
                confirmButtonText: 'OK'
            }).then(()=>{
                          window.location.reload()
                        })
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Network error or request failed.',
            confirmButtonText: 'OK'
        });
    }
});
})
document.addEventListener("DOMContentLoaded", function () {
  const progressBars = document.querySelectorAll(".progress-bar");

  progressBars.forEach(bar => {
      const orderStatus = bar.getAttribute("data-order-status");
      let progressPercentage = 0;
      let barColor = "#a8729a";

      switch (orderStatus) {
          case 'Pending':
              progressPercentage = 10;
              break;
          case 'Requested':
              progressPercentage = 30;
              barColor='#0d6efd'
              
              break;
          
          case 'Delivered':
              progressPercentage = 100;
              barColor='green'
              break;
          case 'Cancelled':
              progressPercentage = 70;
              barColor = "#dc3545";
              break;
          case 'Returned':
              progressPercentage = 50;
              barColor = "#0d6efd";
              break;
          default:
              progressPercentage = 0;
      }

      bar.style.width = progressPercentage + "%";
      bar.style.backgroundColor = barColor;
      bar.setAttribute("aria-valuenow", progressPercentage);
  });
});

      </script>
    
    <% }) %>
    <div class="d-flex justify-content-end container ">
      <div class=" checkout__order mb-4" style="background-color: #e0f7fa; padding: 10px;"> 
        <h5 class="order__title">Your Order</h5>
        <hr>
        <ul class=" checkout__total__all border-top-0 ">
         

           
          
          <li class="text text-start">Total MRP <span class="order_summary" id="">₹  <%= (order.totalAmount || 0) + (order.discounted_price || 0) %></span></li>
          <li class="">Discound On MRP <span class="text-success" id="">₹<%= order.discounted_price  %></span></li>
          <% if(order.coupon_name){ %>
          <li class="">Coupon Name <span class="text-success" id="cart-total"> <%= order.coupon_name %></span></li>
          <% } %>
          <li class="">Total Amound <span id="cart-total">₹ <%= order.totalAmount %></span></li>
      </ul>
      
      
        <% if (order.products[0].paymentStatus === 'Failed' || order.products[0].paymentStatus ===undefined ) { %>
          <div class="mt-3 ml-5"> 
            <button onclick="repay('<%= order._id %>')" class="  btn-success text-white border-0 mr-2"><i class="fas fa-money-check"></i>&nbsp;&nbsp;&nbsp;Pay Now</button>
             
          </div>
        <% }  %>
        
      </div>
    </div>
    <script>
      async function repay(orderId,paymentType){
        let response=await fetch("/re-payment",{
          method:"POST",
          headers:{"Content-Type":"application/json"},
          body:JSON.stringify({orderId,paymentType})
        })
        console.log('response:', response);
        if(response.ok){
          let data = await response.json();
          
           let options = {
                        key: data.key,
                        amount: data.amount,
                        currency: data.currency,
                        name: "trendView",
                        description: "Test Transaction",
                        order_id: data.razorpayOrderId,
                        handler: async function (response) {
                            try {
                                const paymentData = {
                                    razorpayPaymentId: response.razorpay_payment_id,
                                    razorpayOrderId: response.razorpay_order_id,
                                    razorpaySignature: response.razorpay_signature
                                };

                                let verifyResponse = await fetch("/verifyPayment", {
                                    method: "post",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify(paymentData)
                                });

                                let verifyResult = await verifyResponse.json();
                                if (verifyResult.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Payment Success!',
                                        text: 'Your payment was verified and successful!',
                                        confirmButtonText: 'OK'
                                    }).then(() => {
                                        window.location.reload()
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Failed',
                                        text: 'Your payment could not be verified. Please try again.',
                                        confirmButtonText: 'OK'
                                    }).then(()=>{
                          window.location.reload()
                        })
                                }
                            } catch (error) {
                                console.error('Error verifying payment:', error);
                            }
                        },
                        "prefill": {
                            "name": "Your Name",
                            "email": "Your Email",
                            "contact": "Your Phone Number"
                        },
                        "theme": {
                            "color": "#3399cc"
                        }
                    };
                    
                    // Razorpay payment failure handling
                    let rzp = new Razorpay(options);

                    // Handle payment failure
                    rzp.on('payment.failed', async function (response) {
                        console.error('Payment failed:', response.error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Failed',
                            text: 'The payment process failed. Please try again.',
                            confirmButtonText: 'OK'
                        }).then(()=>{
                          window.location.reload()
                        })

                        // Notify the server of the failed payment
                        const paymentData = {
                            razorpayPaymentId: response.error.metadata.payment_id,
                            razorpayOrderId: response.error.metadata.order_id,
                            razorpaySignature: null // No signature for failed payments
                        };

                        let verifyResponse = await fetch("/verifyPayment", {
                            method: "post",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify(paymentData)
                        });

                        let verifyResult = await verifyResponse.json();
                        if (!verifyResult.success) {
                            console.log('Payment status updated to failed.');
                        }
                    });

                    rzp.open();

    }
    
  }
    </script>
    <div class="footer-container container-fluid">
<%- include("../partials/mainFooter") %>
    </div>
<%- include("../partials/homeFooter") %>